1.在SpringBoot项目中添加logback的MDC:https://blog.csdn.net/hongyang321/article/details/78803584
2.WebMvcConfigurerAdapter详解:https://blog.csdn.net/weixin_43453386/article/details/83623242#1addInterceptors_32
3.SpringBoot中使用Jackson将null值转化为"" : https://blog.csdn.net/qq_42815754/article/details/85210235
4.[Windows]查看运行进程的参数【wmic】:https://blog.csdn.net/swazer_z/article/details/60100596
wmic process list brief
5.SpringBoot集成FastDFS :https://yezhwi.github.io/springboot/2017/12/12/SpringBoot%E9%9B%86%E6%88%90FastDFS/
6.https://gitbook.cn/gitchat/activity/5ca5ad991bb9710506d2b127?refresh=true
7.https://gitbook.cn/gitchat/activity/5a79b8fd7648740c4c24e707?refresh=true
https://gitee.com/y_project/RuoYi  

20190603

1.@JsonSerialize
/**Json百分比转换:0.1234->12.34
在Bean上添加注解@JsonSerialize(using = DateSerializerUtil.class)
**/
public class DateSerializerUtil extends JsonSerializer<Object>

2.权限控制AOP
/**
*初始化过滤器链注解
*资源更新时,需要初始化url过滤器链,用于权限控制
**/
@Rentention(value = RententionType.RUNTIME)
@Target(ElementType.METHOD)
pulbic @interface InitFilterChain(){}

@Aspect
public class ShiroFilterChainDefinitionManager{
	@Resource
	..
	
	@AfterReturing("@annotation(..InitFilterChain)")
	public void updateFilterChain(){
		..
	}
}

20190618

20190624:
并发:
http://www.blogjava.net/xylz/archive/2010/07/08/325587.html


20190724:
1. DECODE含义 : 与caseWhen 类似
decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)
这个是decode的表达式，具体的含义解释为：
```
IF 条件=值1 THEN
　　　　RETURN(翻译值1)
ELSIF 条件=值2 THEN
　　　　RETURN(翻译值2)
　　　　......
ELSIF 条件=值n THEN
　　　　RETURN(翻译值n)
ELSE
　　　　RETURN(缺省值)
END IF

```

2.RabbitMq最佳实践:
https://www.cnblogs.com/davenkin/p/rabbitmq-best-practices.html#4271559

20190725:
### 常用注解
@Configuration 作用:
@EnableCaching 作用:配置类上,
@RequestParam(param)  作用:接收传参url?param=param
@PathVariable(value=param) 作用:接收传参utl/{param}
@Param("param")  作用:ibatis/mybatis中标记参数
@JsonIgnore 作用:在json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响。
@Transient 作用:表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性；如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient，否则ORM框架默认其注解为@Basic；

### Jackson相关:
1、@Transient
@Transient表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性；
如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient，否则ORM框架默认其注解为@Basic；
//表示该字段在数据库表中没有
```
@Transient
public int getAge() {
　return 1+1;
}
```
2、@JsonIgnoreProperties
此注解是类注解，作用是json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响。
3、@JsonIgnore
此注解用于属性或者方法上（最好是属性上），作用和上面的@JsonIgnoreProperties一样。
4、@JsonFormat
此注解用于属性或者方法上（最好是属性上），可以方便的把Date类型直接转化为我们想要的模式，比如@JsonFormat(pattern = "yyyy-MM-dd HH-mm-ss")
5、@JsonSerialize
此注解用于属性或者getter方法上，用于在序列化时嵌入我们自定义的代码，比如序列化一个double时在其后面限制两位小数点。
6、@JsonDeserialize
此注解用于属性或者setter方法上，用于在反序列化时可以嵌入我们自定义的代码，类似于上面的@JsonSerialize

### Swagger相关:
更多:https://blog.csdn.net/sanyaoxu_2/article/details/80555328

@Api：用在请求的类上，表示对类的说明
    tags="说明该类的作用，可以在UI界面上看到的注解"
    value="该参数没什么意义，在UI界面上也看到，所以不需要配置"
@ApiOperation：用在请求的方法上，说明方法的用途、作用
    value="说明方法的用途、作用"
    notes="方法的备注说明"
@ApiImplicitParams：用在请求的方法上，表示一组参数说明
    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面
        name：参数名
        value：参数的汉字说明、解释
        required：参数是否必须传
        paramType：参数放在哪个地方
            · header --> 请求参数的获取：@RequestHeader
            · query --> 请求参数的获取：@RequestParam
            · path（用于restful接口）--> 请求参数的获取：@PathVariable
            · body（不常用）
            · form（不常用）    
        dataType：参数类型，默认String，其它值dataType="Integer"       
        defaultValue：参数的默认值
@ApiResponses：用在请求的方法上，表示一组响应
    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息
        code：数字，例如400
        message：信息，例如"请求参数没填好"
        response：抛出异常的类

@ApiModel：用于响应类上，表示一个返回响应数据的信息
            （这种一般用在post创建的时候，使用@RequestBody这样的场景，
            请求参数无法使用@ApiImplicitParam注解进行描述的时候）
    @ApiModelProperty：用在属性上，描述响应类的属性



20190820:
### @SuppressWarnings("rawtypes")
SuppressWarnings压制警告，即去除警告 
rawtypes是说传参时也要传递带泛型的参数

















